{"ast":null,"code":"var _jsxFileName = \"/Users/steve/Desktop/care/client/src/components/ShowStuff/ListResidents.js\";\nimport React, { Component } from 'react';\n\nconst {\n  MongoClient,\n  ObjectID\n} = require('mongodb');\n\nconst residentList = [{\n  \"_id\": \"5f516813ee7249555da0ec20\",\n  \"name\": \"Introduction to Mongoose\",\n  \"price\": 10,\n  \"quantity\": 25,\n  \"__v\": 0\n}, {\n  \"_id\": \"5f51fe7071bed7580b16ff75\",\n  \"name\": \"Introduction to Mongoose\",\n  \"price\": 10,\n  \"quantity\": 25,\n  \"__v\": 0\n}, {\n  \"_id\": \"5f5235f75824cf789e912c41\",\n  \"name\": \"Introduction to Mongoose\",\n  \"price\": 10,\n  \"quantity\": 25,\n  \"__v\": 0\n}];\n\nconst residentList1 = () => {\n  MongoClient.connect('mongodb://SteveAdmin:Gr33n7pple5!!@cluster0-shard-00-00.asquc.mongodb.net:27017,cluster0-shard-00-01.asquc.mongodb.net:27017,cluster0-shard-00-02.asquc.mongodb.net:27017/cottagedata?ssl=true&replicaSet=atlas-ppexg2-shard-0&authSource=admin&retryWrites=true&w=majority', (err, client) => {\n    if (err) {\n      console.log('Unable to connect to MongoDB server');\n    }\n\n    console.log('Connected to MongoDB server');\n    const db = client.db('cottagedata');\n    db.collection('bookstore').find().toArray().then(docs => {\n      console.log('bookstore');\n      console.log(JSON.stringify(docs, undefined, 2));\n    }, err => {\n      console.log('Unable to fetch bookstore', err);\n    });\n  });\n};\n\nclass AppShit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = () => {\n      const itemList = () => {\n        MongoClient.connect('mongodb://SteveAdmin:Gr33n7pple5!!@cluster0-shard-00-00.asquc.mongodb.net:27017,cluster0-shard-00-01.asquc.mongodb.net:27017,cluster0-shard-00-02.asquc.mongodb.net:27017/cottagedata?ssl=true&replicaSet=atlas-ppexg2-shard-0&authSource=admin&retryWrites=true&w=majority', (err, client) => {\n          if (err) {\n            console.log('Unable to connect to MongoDB server');\n          }\n\n          console.log('Connected to MongoDB server');\n          const db = client.db('cottagedata');\n          db.collection('bookstore').find().toArray().then(docs => {\n            console.log('bookstore');\n            console.log(JSON.stringify(docs, undefined, 2));\n          }, err => {\n            console.log('Unable to fetch bookstore', err);\n          });\n        });\n        return itemList;\n      };\n    };\n  }\n\n  //    state = {\n  //        itemList: [\n  //        {\n  //          _id: \"1\",\n  //          desc: \"Manage\",\n  //          price: 5000,\n  //          purchased: false\n  //        },\n  //        {\n  //          _id: \"2\",\n  //          desc: \"Deliver\",\n  //          price: 2000,\n  //          purchased: false\n  //        },\n  //        {\n  //          _id: \"3\",\n  //          desc: \"Market\",\n  //          price: 4000,\n  //          purchased: false\n  //        }\n  //      ]\n  //    };\n  renderItems() {\n    return this.state.itemList.map(item => /*#__PURE__*/React.createElement(\"div\", {\n      key: item._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"Desc: \", item.desc), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"Price: \", item.price), !item.purchased ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 30\n      }\n    }, \"Not purchased\") : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 53\n      }\n    }, \"Purchased\")));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 14\n      }\n    }, this.renderItems());\n  }\n\n} //ReactDOM.render(<AppShit />, document.getElementById(\"root\"));\n\n\nexport default AppShit;","map":{"version":3,"sources":["/Users/steve/Desktop/care/client/src/components/ShowStuff/ListResidents.js"],"names":["React","Component","MongoClient","ObjectID","require","residentList","residentList1","connect","err","client","console","log","db","collection","find","toArray","then","docs","JSON","stringify","undefined","AppShit","state","itemList","renderItems","map","item","_id","desc","price","purchased","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nconst {MongoClient, ObjectID} = require ('mongodb');\n\nconst residentList = [\n    {\n      \"_id\": \"5f516813ee7249555da0ec20\",\n      \"name\": \"Introduction to Mongoose\",\n      \"price\": 10,\n      \"quantity\": 25,\n      \"__v\": 0\n    },\n    {\n      \"_id\": \"5f51fe7071bed7580b16ff75\",\n      \"name\": \"Introduction to Mongoose\",\n      \"price\": 10,\n      \"quantity\": 25,\n      \"__v\": 0\n    },\n    {\n      \"_id\": \"5f5235f75824cf789e912c41\",\n      \"name\": \"Introduction to Mongoose\",\n      \"price\": 10,\n      \"quantity\": 25,\n      \"__v\": 0\n    }\n  ]\n\nconst residentList1 = () =>{\n    MongoClient.connect('mongodb://SteveAdmin:Gr33n7pple5!!@cluster0-shard-00-00.asquc.mongodb.net:27017,cluster0-shard-00-01.asquc.mongodb.net:27017,cluster0-shard-00-02.asquc.mongodb.net:27017/cottagedata?ssl=true&replicaSet=atlas-ppexg2-shard-0&authSource=admin&retryWrites=true&w=majority', (err, client) =>\n    {\n    if(err){\n        console.log('Unable to connect to MongoDB server');\n    }\n    console.log('Connected to MongoDB server');\n\n    const db = client.db('cottagedata');\n\n    db.collection('bookstore').find().toArray().then((docs) => {\n    console.log('bookstore');\n    console.log(JSON.stringify(docs, undefined, 2));\n    },\n    \n    (err) => {\n    console.log('Unable to fetch bookstore', err);\n    });\n    });\n}\n\n  class AppShit extends React.Component {\n      state = () => {\n          const itemList  = () =>{\n            MongoClient.connect('mongodb://SteveAdmin:Gr33n7pple5!!@cluster0-shard-00-00.asquc.mongodb.net:27017,cluster0-shard-00-01.asquc.mongodb.net:27017,cluster0-shard-00-02.asquc.mongodb.net:27017/cottagedata?ssl=true&replicaSet=atlas-ppexg2-shard-0&authSource=admin&retryWrites=true&w=majority', (err, client) =>\n            {\n            if(err){\n                console.log('Unable to connect to MongoDB server');\n            }\n            console.log('Connected to MongoDB server');\n        \n            const db = client.db('cottagedata');\n        \n            db.collection('bookstore').find().toArray().then((docs) => {\n            console.log('bookstore');\n            console.log(JSON.stringify(docs, undefined, 2));\n            },\n            \n            (err) => {\n            console.log('Unable to fetch bookstore', err);\n            });\n            });\n            return(itemList)\n        }\n    }\n//    state = {\n//        itemList: [\n//        {\n//          _id: \"1\",\n//          desc: \"Manage\",\n//          price: 5000,\n//          purchased: false\n//        },\n//        {\n//          _id: \"2\",\n//          desc: \"Deliver\",\n//          price: 2000,\n//          purchased: false\n//        },\n//        {\n//          _id: \"3\",\n//          desc: \"Market\",\n//          price: 4000,\n//          purchased: false\n//        }\n//      ]\n//    };\n  \n    renderItems() {\n      return this.state.itemList.map(item => (\n        <div key={item._id}>\n          <p>Desc: {item.desc}</p>\n          <p>Price: {item.price}</p>\n          {!item.purchased ? <p>Not purchased</p> : <p>Purchased</p>}\n        </div>\n      ));\n    }\n  \n    render() {\n      return <div>{this.renderItems()}</div>;\n    }\n  }\n  \n  //ReactDOM.render(<AppShit />, document.getElementById(\"root\"));\n\n\n \nexport default AppShit;"]},"metadata":{},"sourceType":"module"}