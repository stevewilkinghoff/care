{"ast":null,"code":"var _jsxFileName = \"/Users/steve/Desktop/care/client/src/components/ResidentAssessment/AssessorSignature.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport SignaturePad from \"react-signature-canvas\";\nimport Popup from \"reactjs-popup\";\nimport \"../../../src/App.css\";\nimport \"./sigCanvas.css\";\n\nfunction Sig() {\n  const [imageURL, setImageURL] = useState(null); // create a state that will contain our image\n\n  const sigCanvas = useRef({}); // create a ref using react useRef hook\n\n  /* a function that uses the canvas ref to clear the canvas\n  via a method given by react-signature-canvas */\n\n  const clear = () => sigCanvas.current.clear();\n  /* a function that uses the canvas ref to trim the canvas\n  from white space via a method given by react-signature-canvas\n  then saves it in our state */\n\n\n  const save = ref => setImageURL(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\")).sigCanvas.current.clear();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, \"Signature Pad Example\"), /*#__PURE__*/React.createElement(Popup, {\n    modal: true,\n    trigger: /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      preventdefault: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 26\n      }\n    }, \"Open Signature Pad\"),\n    closeOnDocumentClick: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, close => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SignaturePad, {\n    ref: sigCanvas,\n    canvasProps: {\n      className: \"signatureCanvas\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: save,\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: close,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"Close\"))));\n}\n\nexport default Sig;","map":{"version":3,"sources":["/Users/steve/Desktop/care/client/src/components/ResidentAssessment/AssessorSignature.js"],"names":["React","useEffect","useRef","useState","SignaturePad","Popup","Sig","imageURL","setImageURL","sigCanvas","clear","current","save","ref","getTrimmedCanvas","toDataURL","close","className"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,sBAAP;AACA,OAAO,iBAAP;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC,CADW,CACqC;;AAChD,QAAMM,SAAS,GAAGP,MAAM,CAAC,EAAD,CAAxB,CAFW,CAEmB;;AAE9B;;;AAEA,QAAMQ,KAAK,GAAG,MAAMD,SAAS,CAACE,OAAV,CAAkBD,KAAlB,EAApB;AAEI;;;;;AAGJ,QAAME,IAAI,GAAIC,GAAD,IACTL,WAAW,CAACC,SAAS,CAACE,OAAV,CAAkBG,gBAAlB,GAAqCC,SAArC,CAA+C,WAA/C,CAAD,CAAX,CAAyEN,SAAzE,CAAmFE,OAAnF,CAA2FD,KAA3F,EADJ;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,IAAI,EAAC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,eAEI,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,OAAO,eAAE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,cAAc,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFb;AAGI,IAAA,oBAAoB,EAAE,KAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKM,KAAK,iBACF,uDACA,oBAAC,YAAD;AACA,IAAA,GAAG,EAAEP,SADL;AAEA,IAAA,WAAW,EAAE;AACTQ,MAAAA,SAAS,EAAE;AADF,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAOA;AAAQ,IAAA,OAAO,EAAEL,IAAjB;AAAuB,IAAA,IAAI,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPA,eAQA;AAAQ,IAAA,OAAO,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aARA,eASA;AAAQ,IAAA,OAAO,EAAEM,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aATA,CAPR,CAFJ,CADJ;AA0BH;;AAED,eAAeV,GAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport SignaturePad from \"react-signature-canvas\";\nimport Popup from \"reactjs-popup\";\nimport \"../../../src/App.css\";\nimport \"./sigCanvas.css\";\n\nfunction Sig() {\n    const [imageURL, setImageURL] = useState(null); // create a state that will contain our image\n    const sigCanvas = useRef({}); // create a ref using react useRef hook\n\n    /* a function that uses the canvas ref to clear the canvas\n    via a method given by react-signature-canvas */\n    const clear = () => sigCanvas.current.clear();\n\n        /* a function that uses the canvas ref to trim the canvas\n    from white space via a method given by react-signature-canvas\n    then saves it in our state */\n    const save = (ref) =>\n        setImageURL(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\")).sigCanvas.current.clear()\n\n\n    return(\n        <div className=\"App\" type=\"button\">\n            <h5>Signature Pad Example</h5>\n            <Popup \n                modal\n                trigger={<button type=\"button\" preventdefault=\"true\">Open Signature Pad</button>}\n                closeOnDocumentClick={false}\n                \n                >\n                {close => (\n                    <>\n                    <SignaturePad\n                    ref={sigCanvas}\n                    canvasProps={{\n                        className: \"signatureCanvas\"\n                    }}\n                    />\n                    <button onClick={save} type=\"button\">Save</button>\n                    <button onClick={clear}>Clear</button>\n                    <button onClick={close}>Close</button>\n                    \n                    </>\n                )}\n                </Popup>\n        </div>\n    );\n}\n\nexport default Sig;\n\n"]},"metadata":{},"sourceType":"module"}