{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    } // TODO: Destructure this\n\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n    const MongoAuthProcess = kerberos.processes.MongoAuthProcess;\n    const authProcess = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, mechanismProperties);\n    authProcess.init(username, password, err => {\n      if (err) return callback(err, false);\n      authProcess.transition('', (err, payload) => {\n        if (err) return callback(err, false);\n        const command = {\n          saslStart: 1,\n          mechanism: 'GSSAPI',\n          payload,\n          autoAuthorize: 1\n        };\n        connection.command('$external.$cmd', command, (err, result) => {\n          if (err) return callback(err, false);\n          const doc = result.result;\n          authProcess.transition(doc.payload, (err, payload) => {\n            if (err) return callback(err, false);\n            const command = {\n              saslContinue: 1,\n              conversationId: doc.conversationId,\n              payload\n            };\n            connection.command('$external.$cmd', command, (err, result) => {\n              if (err) return callback(err, false);\n              const doc = result.result;\n              authProcess.transition(doc.payload, (err, payload) => {\n                if (err) return callback(err, false);\n                const command = {\n                  saslContinue: 1,\n                  conversationId: doc.conversationId,\n                  payload\n                };\n                connection.command('$external.$cmd', command, (err, result) => {\n                  if (err) return callback(err, false);\n                  const response = result.result;\n                  authProcess.transition(null, err => {\n                    if (err) return callback(err, null);\n                    callback(null, response);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = GSSAPI;","map":{"version":3,"sources":["/Users/steve/Desktop/care/node_modules/mongodb/lib/core/auth/gssapi.js"],"names":["AuthProvider","require","retrieveKerberos","kerberos","GSSAPI","auth","authContext","callback","connection","credentials","e","username","password","mechanismProperties","gssapiServiceName","MongoAuthProcess","processes","authProcess","host","port","init","err","transition","payload","command","saslStart","mechanism","autoAuthorize","result","doc","saslContinue","conversationId","response","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    // TODO: Destructure this\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName =\n      mechanismProperties['gssapiservicename'] ||\n      mechanismProperties['gssapiServiceName'] ||\n      'mongodb';\n\n    const MongoAuthProcess = kerberos.processes.MongoAuthProcess;\n    const authProcess = new MongoAuthProcess(\n      connection.host,\n      connection.port,\n      gssapiServiceName,\n      mechanismProperties\n    );\n\n    authProcess.init(username, password, err => {\n      if (err) return callback(err, false);\n\n      authProcess.transition('', (err, payload) => {\n        if (err) return callback(err, false);\n\n        const command = {\n          saslStart: 1,\n          mechanism: 'GSSAPI',\n          payload,\n          autoAuthorize: 1\n        };\n\n        connection.command('$external.$cmd', command, (err, result) => {\n          if (err) return callback(err, false);\n\n          const doc = result.result;\n          authProcess.transition(doc.payload, (err, payload) => {\n            if (err) return callback(err, false);\n            const command = {\n              saslContinue: 1,\n              conversationId: doc.conversationId,\n              payload\n            };\n\n            connection.command('$external.$cmd', command, (err, result) => {\n              if (err) return callback(err, false);\n\n              const doc = result.result;\n              authProcess.transition(doc.payload, (err, payload) => {\n                if (err) return callback(err, false);\n                const command = {\n                  saslContinue: 1,\n                  conversationId: doc.conversationId,\n                  payload\n                };\n\n                connection.command('$external.$cmd', command, (err, result) => {\n                  if (err) return callback(err, false);\n\n                  const response = result.result;\n                  authProcess.transition(null, err => {\n                    if (err) return callback(err, null);\n                    callback(null, response);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\n\nmodule.exports = GSSAPI;\n"]},"metadata":{},"sourceType":"script"}