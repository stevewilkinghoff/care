{"ast":null,"code":"var _jsxFileName = \"/Users/steve/Desktop/care/client/src/Users/UsersPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport UsersList from './UsersList';\nimport ErrorModal from './ErrorModal';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Users = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const [loadedUsers, setLoadedUsers] = useState();\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:4002/api/residents');\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedUsers(responseData.residents);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n\n  const errorHandler = () => {\n    setError(null);\n  }; //return (\n  //  <React.Fragment>\n  //    <ErrorModal error={error} onClear={errorHandler} />\n  //    {isLoading && (\n  //      <div className=\"center\">\n  //        <LoadingSpinner />\n  //      </div>\n  //    )}\n  //    {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\n  //  </React.Fragment>\n  //);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, loadedUsers);\n};\n\nexport default Users;","map":{"version":3,"sources":["/Users/steve/Desktop/care/client/src/Users/UsersPage.js"],"names":["React","useEffect","useState","UsersList","ErrorModal","LoadingSpinner","Users","isLoading","setIsLoading","error","setError","loadedUsers","setLoadedUsers","sendRequest","response","fetch","responseData","json","ok","Error","message","residents","err","errorHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,WAAW,GAAG,YAAY;AAC9BL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACF,cAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,CAA5B;AAEA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AAEA,YAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AAEDR,QAAAA,cAAc,CAACI,YAAY,CAACK,SAAd,CAAd;AACD,OAVD,CAUE,OAAOC,GAAP,EAAY;AACZZ,QAAAA,QAAQ,CAACY,GAAG,CAACF,OAAL,CAAR;AACD;;AACDZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAhBD;;AAiBAK,IAAAA,WAAW;AACZ,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,QAAMU,YAAY,GAAG,MAAM;AACzBb,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD,CA1BkB,CA8BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,WADL,CADJ;AAKD,CA/CD;;AAiDA,eAAeL,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport UsersList from './UsersList';\nimport ErrorModal from './ErrorModal';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Users = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const [loadedUsers, setLoadedUsers] = useState();\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://localhost:4002/api/residents');\n\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedUsers(responseData.residents);\n      } catch (err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n    };\n    sendRequest();\n  }, []);\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  //return (\n  //  <React.Fragment>\n  //    <ErrorModal error={error} onClear={errorHandler} />\n  //    {isLoading && (\n  //      <div className=\"center\">\n  //        <LoadingSpinner />\n  //      </div>\n  //    )}\n  //    {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\n  //  </React.Fragment>\n  //);\n\n  return (\n      <div>\n          {loadedUsers}\n      </div>\n  )\n};\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}